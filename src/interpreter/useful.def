#ifndef MCROWS_DEFS
#define MCROWS_DEFS

#include <string.h>

/*MACROS and definitions*/

#define SWITCH_CMD(incmd,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,rr,ss,rA,sA,rrA,ssA,t,u,v,w,vV,wW,x,y,z,zz,zza,zzb,zzc,zzd,zze,zzf,zzg,zzh,zzi,zzj) \
switch(incmd){\
case ALLOC: a; break;\
case ENTERR: b; break;\
case PUSHS: c; break;\
case CALL: d; break;\
case POPI: e; break;\
case PUSHGA: f; break;\
case PUSHA: g; break;\
case FETCHI: h; break;\
case FETCHR: i; break;\
case STOREI: j; break;\
case STORER: k; break;\
case PUSHCI: l; break;\
case PUSHCR: m; break;\
case SETRVI: n; break;\
case SETRVR: o; break;\
case RETURNF: p; break;\
case RETURN: q; break;\
case LTI: r; break;\
case LTR: s; break;\
case LEI: rr; break;\
case LER: ss; break;\
case GTI: rA; break;\
case GTR: sA; break;\
case GEI: rrA; break;\
case GER: ssA; break;\
case JUMP: t; break;\
case JUMPZ: u; break;\
case MULI: v; break;\
case MULR: w; break;\
case DIVI: vV; break;\
case DIVR: wW; break;\
case ADDI: x; break;\
case ADDR: y; break;\
case SUBI: z; break;\
case SUBR: zz; break;\
case FLT: zza; break;\
case FLTB: zzb; break;\
case INTT: zzc; break;\
case INTTB: zzd; break;\
case EQI: zze; break;\
case EQR: zzf; break;\
case NEI: zzg; break;\
case NER: zzh; break;\
case NEGI: zzi; break;\
case NEGR: zzj; break;\
default: break;\
}

typedef enum _command_names command_names;
enum _command_names {
    ALLOC,ENTERR,PUSHS,CALL,POPI,PUSHGA,PUSHA,FETCHI,\
    FETCHR,STOREI,STORER,PUSHCI,PUSHCR, SETRVI,SETRVR, \
    RETURNF,RETURN, LTI,LTR,LEI, LER, GTI, GTR, GEI, GER, \
	JUMP,JUMPZ, MULI, MULR, DIVI, DIVR, ADDI, ADDR, SUBI, \
	SUBR, FLT, FLTB, INTT, INTTB, EQI, EQR, NEI, NER, NEGI, NEGR
};

const static char * command_name_strings[] = {
    "alloc", "enter", "pushs", "call", "popI", "pushga", "pusha", "fetchI", \
    "fetchR", "storeI", "storeR","pushcI", "pushcR", "setrvI", "setrvR", \
    "returnf", "return", "ltI", "ltR", "leI", "leR", "gtI", "gtR", "geI", "geR", \
	"jump", "jumpz", "mulI", "mulR", "divI", "divR" ,"addI", "addR", "subI", \
	"subR", "flt", "fltb", "int", "intb", "eqI", "eqR", "neI", "neR", "negI", "negR"
};


#define FORCMD(instring, info,tempstring) for(int a =0; a < sizeof(cmdinf)/sizeof(command_names); a++){\
	if(strcmp(instring, info[a].command_name_string) == 0){\
		tempstring = info[a].cmd_name;\
/*		dbprint(LISTC, "found something... ", 1, STR, command_name_strings[tempstring]);*/\
/*		dbprint(LISTC, "also in the form of ...... ", 1, STR, info[a].command_name_string);*/\
		break; \
	}\
}





#define check_str_length_bf_input(input)  ((int)strlen(string_buf_ptr)+(int)strlen(input) < MAX_STR_CONST ? 1 : 0 )


#define SWITCH(intype,forint,forfloat,forstr,fordef) \
		switch(intype){ \
			case INT: \
						forint; break; \
			case FLOAT: \
						forfloat; break; \
			case STR: \
			case CHAR:	 \
		 				forstr; break; \
			case REFINT: \
			case REFFLOAT: \
			case REFSTR: \
			case LONG: \
			default: \
						fordef; break; \
		 }




#endif
